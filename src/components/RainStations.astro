---
import type { HTMLAttributes } from "astro/types";
import RainStationsCard from './RainStationsCard.astro';

interface StationAttribute {
    id_atributo: string;
    nombre: string;
    descripcion: string;
    categoria: string;
    valor_numerico: number | null;
    valor_alfanumerico: string;
    valor_fecha: string | null;
    variable: string | null;
    resolucion: string | null;
    titulo: string;
}

interface Station {
    id_feature_vector: string;
    geometry_text: string;
    atributos: {
        descripcion: {
            [key: string]: StationAttribute;
        };
        grafico: {
            [key: string]: StationAttribute;
        };
        metadato: {
            [key: string]: StationAttribute;
        };
    };
}

interface ApiResponse {
    feature_vector: Station[];
}

const API_URL =
    "https://siata.gov.co/siata_nuevo/index.php/capa_service/consultar_capa_carga";
const LAYER_ID = "C_00000000000000000000210";

const response = await fetch(API_URL, {
    method: "POST",
    headers: {
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        Accept: "application/json",
        "X-Requested-With": "XMLHttpRequest",
    },
    body: `id_capa=${LAYER_ID}`,
});

const data: ApiResponse = await response.json();
const stations = data.feature_vector.sort((a, b) => {
    const rainA5m = parseFloat(
        a.atributos.descripcion.D_5_m?.valor_alfanumerico || "0",
    );
    const rainB5m = parseFloat(
        b.atributos.descripcion.D_5_m?.valor_alfanumerico || "0",
    );
    
    // If the 5m values are different, sort by them
    if (rainA5m !== rainB5m) {
        return rainB5m - rainA5m;
    }
    
    // If 5m values are equal, sort by 30D values
    const rainA30D = parseFloat(
        a.atributos.descripcion.D_30_D?.valor_alfanumerico || "0",
    );
    const rainB30D = parseFloat(
        b.atributos.descripcion.D_30_D?.valor_alfanumerico || "0",
    );
    return rainB30D - rainA30D;
});
//   .slice(0, 20);
---

<div class="rain-stations">
    <h2>Estaciones Pluviométricas</h2>
    <p class="description">Mediciones de precipitación en tiempo real</p>
    <div class="stations-grid">
        {stations.map((station) => (
            <RainStationsCard station={station} />
        ))}
    </div>
</div>

<style>
    .rain-stations {
        padding: 1rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .description {
        text-align: center;
        color: #666;
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }

    .stations-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }
</style>
