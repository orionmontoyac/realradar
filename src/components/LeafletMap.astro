---
// LeafletMap.astro
// This component renders an interactive Leaflet map displaying a base layer,
// a weather radar overlay (switchable between static and animated),
// the user's current location (if permitted), and the temperature
// at the user's location or the map center.

import Icon from "./Icon.astro"; // Assuming Icon component displays an SVG icon

// Component props (if any were needed, they would go here)
// interface Props {}
// const {} = Astro.props;
---

<div id="map" class="map-container"></div>

<button id="switchButton" class="switch-button">Est&aacute;tico</button>

<div id="temperatureDisplay" class="temperature-display">
    <Icon icon="weather" size="2.0em" /> <span class="temp-value">--Â°C</span>
    <span class="location-name">Loading...</span>
</div>

<style>
    /* Basic reset for full-screen map */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    /* Map container styling */
    .map-container {
        height: 100vh; /* Full viewport height */
        width: 100vw; /* Full viewport width */
    }

    /* Ensure map overlays correctly */
    #map {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1; /* Base layer z-index */
    }

    /* Improve image rendering for overlay */
    .leaflet-image-layer {
        image-rendering: auto; /* Or pixelated if preferred for radar */
    }

    /* Styling for the overlay switch button */
    .switch-button {
        width: 150px;
        height: 40px;
        z-index: 1000; /* Ensure button is above map */
        border-radius: 20px;
        background-color: var(--gray-999);
        border: none;
        cursor: pointer;
        position: fixed;
        bottom: 40px;
        right: 60px;
        outline: none;
        transition: background-color 0.3s, color 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 10px;
        font-family: Arial, sans-serif;
        font-size: var(--text-sm);
        font-weight: bolder;
        color: var(--gray-50);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        box-shadow: var(--shadow-md);
    }

    /* Active state style for the switch button */
    .switch-button.active {
        background-color: var(--accent-regular);
        color: white;
    }

    /* Temperature display styling */
    .temperature-display {
        position: fixed;
        bottom: 100px;
        right: 90px;
        /* Using CSS variables for theming */
        background-color: var(--theme-bg-alpha, rgba(255, 255, 255, 0.9));
        color: var(--theme-text, #000);
        padding: 10px 15px;
        border-radius: 8px;
        z-index: 1000; /* Ensure display is above map */
        box-shadow: var(--shadow-md);
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        transition: all 0.3s ease;
    }

    /* Dark theme overrides for temperature display */
    .theme-dark .temperature-display {
        --theme-bg-alpha: rgba(30, 30, 30, 0.9);
        --theme-text: white;
        --location-text-color: var(--gray-400);
    }

    /* Temperature value text style */
    .temp-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    /* Location name text style */
    .location-name {
        font-size: 0.875rem;
        color: var(--location-text-color, var(--gray-500)); /* Default light theme color */
    }
</style>

<script>
    import L from "leaflet";
    import "leaflet/dist/leaflet.css";

    // Wait for the DOM to be fully loaded before initializing the map
    document.addEventListener("DOMContentLoaded", () => {
        // --- Configuration Constants ---
        const MEDELLIN_COORDS: L.LatLngTuple = [6.2442, -75.5812]; // Default map center
        const INITIAL_ZOOM = 10;
        const USER_LOCATION_ZOOM = 11;
        const MIN_ZOOM = 5; // Example: Set a minimum zoom level
        const MAX_ZOOM = 18; // Example: Set a maximum zoom level
        const RADAR_REFRESH_INTERVAL_MS = 5 * 60 * 1000; // 5 minutes
        const WEATHER_API_KEY = import.meta.env.PUBLIC_WEATHER_API_KEY; // API Key from environment variables
        const STATIC_RADAR_URL =
            "https://siata.gov.co/kml/00_Radar/Ultimo_Barrido/AreaMetRadar_10_120_DBZH.png";
        const ANIMATED_RADAR_URL =
            "https://realradar.nyc3.digitaloceanspaces.com/rain.gif";
        // Geographical bounds for the radar image overlay
        const RADAR_IMAGE_BOUNDS = L.latLngBounds(
            L.latLng(5.1004, -76.5946), // Southwest corner
            L.latLng(7.3004, -74.2946), // Northeast corner
        );
        const USER_ICON_URL = "/assets/pin.svg"; // Path to the user location marker icon

        // --- DOM Element References ---
        const mapElement = document.getElementById("map");
        const switchButtonElement =
            document.getElementById("switchButton");
        const temperatureDisplayElement = document.getElementById(
            "temperatureDisplay",
        );
        const tempValueElement =
            temperatureDisplayElement?.querySelector<HTMLElement>(".temp-value");
        const locationNameElement =
            temperatureDisplayElement?.querySelector<HTMLElement>(
                ".location-name",
            );

        // --- State Variables ---
        let map: L.Map | null = null;
        let currentBaseLayer: L.TileLayer | null = null;
        let currentRadarOverlay: L.ImageOverlay | null = null;
        let isRadarAnimated = false;
        let radarUpdateInterval: number | null = null;

        // --- Type Definitions ---
        interface WeatherApiResponse {
            location: { name: string };
            current: { temp_c: number };
        }

        // --- Initialization Check ---
        // Prevent re-initializing the map if the script runs again (e.g., during HMR)
        if (!mapElement || (mapElement as any)._leaflet_id) {
            console.log("Map container not found or already initialized.");
            return;
        }
        if (!temperatureDisplayElement || !tempValueElement || !locationNameElement) {
            console.error("Temperature display elements not found.");
            return; // Cannot proceed without temp display
        }

        // --- Core Functions ---

        /**
         * Initializes the Leaflet map instance.
         * @returns {L.Map} The initialized Leaflet map instance.
         */
        function initializeMap(): L.Map {
            if (!mapElement) {
                throw new Error("Map container element not found");
            }
            const mapInstance = L.map(mapElement, {
                zoomControl: false, // Disable default zoom controls
                center: MEDELLIN_COORDS,
                zoom: INITIAL_ZOOM,
                minZoom: MIN_ZOOM,
                maxZoom: MAX_ZOOM,
            });

            // Add zoom control at a different position if desired
            L.control.zoom({ position: "topright" }).addTo(mapInstance);

            return mapInstance;
        }

        /**
         * Defines the available base map tile layers.
         * @returns {Record<string, L.TileLayer>} An object mapping layer names to TileLayer instances.
         */
        function getBaseLayers(): Record<string, L.TileLayer> {
            // Using Stadia Maps - requires attribution. Add appropriate attribution.
            const stadiaAttribution =
                '&copy; <a href="https://stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors';

            return {
                // Light theme map
                "Alidade Smooth": L.tileLayer(
                    "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png",
                    { attribution: stadiaAttribution, maxZoom: MAX_ZOOM },
                ),
                // Dark theme map
                "Dark Matter": L.tileLayer(
                    "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png",
                    { attribution: stadiaAttribution, maxZoom: MAX_ZOOM },
                ),
            };
        }

        /**
         * Switches the base map layer based on the current theme (light/dark).
         * @param {string} theme - The current theme ('light' or 'dark').
         * @param {L.Map} mapInstance - The Leaflet map instance.
         * @param {Record<string, L.TileLayer>} baseLayers - Available base layers.
         */
        function switchBaseMapLayer(
            theme: "light" | "dark",
            mapInstance: L.Map,
            baseLayers: Record<string, L.TileLayer>,
        ): void {
            if (currentBaseLayer) {
                mapInstance.removeLayer(currentBaseLayer);
            }

            const newLayer =
                theme === "dark"
                    ? baseLayers["Dark Matter"]
                    : baseLayers["Alidade Smooth"];

            if (newLayer) {
                currentBaseLayer = newLayer;
                currentBaseLayer.addTo(mapInstance);
            } else {
                console.error("Could not find appropriate base layer for theme:", theme);
            }
        }

        /**
         * Sets up an observer to automatically switch the map theme when the HTML class changes.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         * @param {Record<string, L.TileLayer>} baseLayers - Available base layers.
         */
        function setupThemeSwitcher(
            mapInstance: L.Map,
            baseLayers: Record<string, L.TileLayer>,
        ): void {
            const observer = new MutationObserver(() => {
                const currentTheme = document.documentElement.classList.contains(
                    "theme-dark",
                )
                    ? "dark"
                    : "light";
                switchBaseMapLayer(currentTheme, mapInstance, baseLayers);
            });

            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ["class"], // Only observe changes to the 'class' attribute
            });

            // Initial theme check
            const initialTheme = document.documentElement.classList.contains("theme-dark") ? "dark" : "light";
            switchBaseMapLayer(initialTheme, mapInstance, baseLayers);
        }


        /**
         * Updates the content of the temperature display element.
         * @param {string | number | null} temp - The temperature value (number) or null for N/A.
         * @param {string | null} location - The location name or null for error/loading state.
         * @param {boolean} isLoading - Indicates if data is currently loading.
         * @param {boolean} isError - Indicates if an error occurred.
         */
        function updateTemperatureUI(
            temp: string | number | null,
            location: string | null,
            isLoading: boolean = false,
            isError: boolean = false,
        ): void {
             if (!tempValueElement || !locationNameElement) return;

            if (isLoading) {
                tempValueElement.textContent = "--Â°C";
                locationNameElement.textContent = "Loading...";
            } else if (isError) {
                tempValueElement.textContent = "N/A";
                locationNameElement.textContent = "Error loading data";
            } else if (temp !== null && location !== null) {
                tempValueElement.textContent = `${Math.round(Number(temp))}Â°C`;
                locationNameElement.textContent = location;
            } else {
                 // Handle unexpected nulls if not loading or error
                tempValueElement.textContent = "N/A";
                locationNameElement.textContent = "Unavailable";
            }
        }

        /**
         * Fetches current weather data from the WeatherAPI for given coordinates.
         * @param {number} lat - Latitude.
         * @param {number} lon - Longitude.
         */
        async function fetchTemperature(lat: number, lon: number): Promise<void> {
            if (!WEATHER_API_KEY) {
                console.error("Weather API key is missing.");
                 updateTemperatureUI(null, null, false, true); // Update UI with error
                return;
            }

             updateTemperatureUI(null, null, true); // Show loading state

            try {
                const response = await fetch(
                    `https://api.weatherapi.com/v1/current.json?key=${WEATHER_API_KEY}&q=${lat},${lon}&aqi=no`,
                );

                if (!response.ok) {
                    // Throw an error with status text for better debugging
                    throw new Error(`Weather data fetch failed: ${response.status} ${response.statusText}`);
                }

                const data: WeatherApiResponse = await response.json();
                updateTemperatureUI(data.current.temp_c, data.location.name); // Update UI with data

            } catch (error) {
                console.error("Error fetching temperature:", error);
                updateTemperatureUI(null, null, false, true); // Update UI with error state
            }
        }

        /**
         * Adds or updates the weather radar overlay on the map.
         * Uses the `isRadarAnimated` state to determine which URL to use.
         * Appends a timestamp to the static URL to prevent caching issues.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function updateRadarOverlay(mapInstance: L.Map): void {
            // Remove the previous overlay if it exists
            if (currentRadarOverlay) {
                mapInstance.removeLayer(currentRadarOverlay);
                currentRadarOverlay = null;
            }

            const imageUrl = isRadarAnimated
                ? ANIMATED_RADAR_URL
                : `${STATIC_RADAR_URL}?t=${new Date().getTime()}`; // Cache buster for static image

            // Create and add the new image overlay
            currentRadarOverlay = L.imageOverlay(imageUrl, RADAR_IMAGE_BOUNDS, {
                opacity: 0.6, // Slightly increased opacity
                interactive: false, // Overlay doesn't capture mouse events
                errorOverlayUrl: '/assets/radar-error.png' // Optional: Placeholder if image fails to load
            }).addTo(mapInstance);
        }

        /**
         * Toggles the radar overlay between static and animated modes.
         * Updates the button text and style.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function toggleRadarOverlay(mapInstance: L.Map): void {
            isRadarAnimated = !isRadarAnimated;
            updateRadarOverlay(mapInstance); // Refresh the overlay with the new state

            // Update the switch button appearance and text
            if (switchButtonElement) {
                switchButtonElement.classList.toggle("active", isRadarAnimated);
                switchButtonElement.textContent = isRadarAnimated
                    ? "AnimaciÃ³n"
                    : "EstÃ¡tico";
            }
        }


        /**
         * Sets up event listeners for user interactions and window events.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function setupEventListeners(mapInstance: L.Map): void {
            // Listener for the radar overlay switch button
            if (switchButtonElement) {
                switchButtonElement.addEventListener("click", () => {
                    toggleRadarOverlay(mapInstance);
                });
            } else {
                console.warn("Switch button element not found. Toggle functionality disabled.");
            }

            // Listener for window resize to ensure map displays correctly
            window.addEventListener("resize", () => {
                mapInstance.invalidateSize(); // Recalculate map size
            });
        }

         /**
         * Attempts to get the user's current location using the Geolocation API.
         * If successful, centers the map on the user's location, adds a marker,
         * and fetches the temperature for that location.
         * If unsuccessful or not supported, fetches temperature for the default location.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function handleGeolocation(mapInstance: L.Map): void {
             if (navigator.geolocation) {
                 navigator.geolocation.getCurrentPosition(
                     (position) => {
                         // Geolocation successful
                         const { latitude, longitude } = position.coords;
                         const userCoords: L.LatLngTuple = [latitude, longitude];

                         // Center map and set appropriate zoom
                         mapInstance.setView(userCoords, USER_LOCATION_ZOOM);

                         // Add a marker at the user's location
                         const userIcon = L.icon({
                             iconUrl: USER_ICON_URL,
                             iconSize: [38, 38], // pixels
                             iconAnchor: [19, 38], // point of the icon which will correspond to marker's location
                             popupAnchor: [0, -38], // point from which the popup should open relative to the iconAnchor
                         });
                         L.marker(userCoords, { icon: userIcon })
                             .addTo(mapInstance)
                            //  .bindPopup("<b>Your Location</b>") // Optional popup
                            //  .openPopup();

                         // Fetch temperature for user's location
                         fetchTemperature(latitude, longitude);
                     },
                     (error) => {
                         // Geolocation failed or denied
                         console.error("Error getting location:", error.message);
                         // Optionally provide user feedback (e.g., using a toast notification)
                         // alert(`Could not retrieve your location: ${error.message}`);
                         console.warn("Could not retrieve location. Using default location for temperature.");
                         // Fetch temperature for the default map center (Medellin)
                         fetchTemperature(MEDELLIN_COORDS[0], MEDELLIN_COORDS[1]);
                     },
                     {
                        // Geolocation options
                        enableHighAccuracy: false, // Lower power consumption
                        timeout: 10000, // 10 seconds max to get location
                        maximumAge: 60000 // Allow cached location up to 1 minute old
                     }
                 );
             } else {
                 // Geolocation not supported by the browser
                 console.warn("Geolocation is not supported by this browser.");
                 // alert("Geolocation is not supported by your browser.");
                 // Fetch temperature for the default map center (Medellin)
                  fetchTemperature(MEDELLIN_COORDS[0], MEDELLIN_COORDS[1]);
             }
         }

        /**
         * Starts the periodic refresh of the radar overlay.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function startRadarRefresh(mapInstance: L.Map): void {
            // Clear any existing interval first
            if (radarUpdateInterval !== null) {
                clearInterval(radarUpdateInterval);
            }
             // Start the interval and store its ID
             radarUpdateInterval = window.setInterval(() => {
                 console.log("Refreshing radar overlay...");
                 updateRadarOverlay(mapInstance);
             }, RADAR_REFRESH_INTERVAL_MS);
         }


        // --- Main Execution ---

        try {
            // 1. Initialize the map
            map = initializeMap();

            // 2. Get base layers
            const baseLayers = getBaseLayers();

            // 3. Setup theme switching based on HTML class
            setupThemeSwitcher(map, baseLayers);

            // 4. Add the initial radar overlay
            updateRadarOverlay(map);

            // 5. Set up event listeners (button clicks, resize)
            setupEventListeners(map);

            // 6. Handle geolocation and initial temperature fetch
            handleGeolocation(map);

            // 7. Start periodic radar refresh
            startRadarRefresh(map);

        } catch (error) {
            console.error("Failed to initialize map component:", error);
            if (mapElement) {
                mapElement.innerHTML = '<p style="padding: 20px; text-align: center; color: red;">Error loading map.</p>';
            }
             updateTemperatureUI(null, null, false, true); // Show error in temp display
        }

    }); // End of DOMContentLoaded listener
</script>