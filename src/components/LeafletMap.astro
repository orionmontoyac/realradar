---
// LeafletMap.astro
import Icon from "./Icon.astro";
---

<div id="map" class="map-container"></div>
<button id="switchButton" class="switch-button">Est&aacutetico</button>
<div id="temperatureDisplay" class="temperature-display">
    <Icon icon="weather" size="2.0em" />
    <span class="temp-value">--°C</span>

    <span class="location-name">Loading...</span>
</div>

<style>
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .map-container {
        height: 100vh;
        width: 100vw;
    }

    #map {
        position: absolute;
        top: 0;
        left: 0;
    }

    .refresh-btn {
        padding: 5px 10px;
        background-color: white;
        border: 2px solid rgba(0, 0, 0, 0.2);
        border-radius: 4px;
        cursor: pointer;
    }

    .refresh-btn:hover {
        background-color: #f4f4f4;
    }
    .leaflet-image-layer {
        image-rendering: auto;
    }
    .switch-button {
        width: 150px;
        height: 40px;
        z-index: 1000;
        border-radius: 20px;
        background-color: var(--gray-999);
        border: none;
        cursor: pointer;
        position: fixed;
        bottom: 40px;
        right: 60px;
        outline: none;
        transition: background-color 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 10px;
        font-family: Arial, sans-serif;
        font-size: var(--text-sm);
        font-weight: bolder;
        color: var(--gray-50);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        box-shadow: var(--shadow-md);
    }

    .switch-button::after {
        content: "";
        width: 36px;
        height: 36px;
        background-color: var(--gray-999);
        border-radius: 50%;
        position: absolute;
        top: 2px;
        left: 2px;
        transition: left 0.3s;
        color: white;
    }

    .switch-button.active {
        background-color: var(--accent-regular);
        color: white;
    }

    .switch-button.active::after {
        left: 112px; /* Adjusted for the wider button */
    }
    .temperature-display {
        position: fixed;
        bottom: 100px;
        right: 90px;
        /* background-color: rgba(255, 255, 255, 0.9); */
        padding: 10px 15px;
        border-radius: 8px;
        z-index: 1000;
        /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); */
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        transition: all 0.3s ease;
    }

    .theme-dark .temperature-display {
        background-color: rgba(30, 30, 30, 0.9);
        color: white;
    }

    .temp-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .location-name {
        font-size: 0.875rem;
        color: var(--gray-200);
    }

    .theme-dark .location-name {
        color: var(--gray-400);
    }
</style>

<script>
    import L from "leaflet";
    import "leaflet/dist/leaflet.css";

    document.addEventListener("DOMContentLoaded", () => {
        const mapElement = document.getElementById("map");
        const switchButton = document.getElementById("switchButton");
        const temperatureDisplay =
            document.getElementById("temperatureDisplay");
        let currentLayer: L.Layer;

        if (!mapElement || (mapElement as any)._leaflet_id) return;

        // weatherapi API configuration
        const WEATHER_API_KEY = import.meta.env.PUBLIC_WEATHER_API_KEY;

        interface WeatherApiResponse {
            location: {
                name: string;
                region: string;
                country: string;
            };
            current: {
                temp_c: number;
                condition: {
                    text: string;
                    icon: string;
                };
            };
        }

        async function fetchTemperature(lat: number, lon: number) {
            try {
                const response = await fetch(
                    `https://api.weatherapi.com/v1/current.json?key=${WEATHER_API_KEY}&q=${lat},${lon}&aqi=no`,
                );

                if (!response.ok) {
                    throw new Error("Weather data fetch failed");
                }

                const data: WeatherApiResponse = await response.json();

                const temperatureDisplay =
                    document.getElementById("temperatureDisplay");
                if (temperatureDisplay) {
                    const tempValue =
                        temperatureDisplay.querySelector<HTMLElement>(
                            ".temp-value",
                        );
                    const locationName =
                        temperatureDisplay.querySelector<HTMLElement>(
                            ".location-name",
                        );

                    if (tempValue) {
                        tempValue.textContent = `${Math.round(data.current.temp_c)}°C`;
                    }
                    if (locationName) {
                        locationName.textContent = data.location.name;
                    }
                } else {
                    console.error("no temperaute");
                }
            } catch (error) {
                console.error("Error fetching temperature:", error);
                const temperatureDisplay = document.getElementById(
                    "temperature-display",
                );
                if (temperatureDisplay) {
                    const tempValue =
                        temperatureDisplay.querySelector<HTMLElement>(
                            ".temp-value",
                        );
                    const locationName =
                        temperatureDisplay.querySelector<HTMLElement>(
                            ".location-name",
                        );

                    if (tempValue) {
                        tempValue.textContent = "N/A";
                    }
                    if (locationName) {
                        locationName.textContent = "Error loading data";
                    }
                }
            }
        }

        const medellinCoords: L.LatLngTuple = [6.2442, -75.5812];

        const map = L.map(mapElement, {
            zoomControl: false, // This line disables the zoom buttons
        }).setView(medellinCoords, 10);

        const baseMaps = {
            OpenStreetMap: L.tileLayer(
                "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
            ),
            "Alidade Smooth": L.tileLayer(
                "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png",
            ),
            "Dark Matter": L.tileLayer(
                "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png",
            ),
        };

        function switchMapLayer(theme: string) {
            if (currentLayer) {
                map.removeLayer(currentLayer);
            }

            if (theme === "dark") {
                currentLayer = baseMaps["Dark Matter"];
            } else {
                currentLayer = baseMaps["Alidade Smooth"];
            }

            currentLayer.addTo(map);
        }

        switchMapLayer(
            document.documentElement.classList.contains("theme-dark")
                ? "dark"
                : "light",
        );

        // L.control.layers(baseMaps).addTo(map);

        const observer = new MutationObserver(() => {
            const theme = document.documentElement.classList.contains(
                "theme-dark",
            )
                ? "dark"
                : "light";
            switchMapLayer(theme);
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
        });

        const imageBounds = L.latLngBounds(
            L.latLng(5.1004, -76.5946),
            L.latLng(7.3004, -74.2946),
        );

        let currentOverlay: L.Layer | null = null;
        let isAnimated = false;

        function addRadarOverlay() {
            if (currentOverlay) {
                map.removeLayer(currentOverlay);
            }

            const imageUrl = isAnimated
                ? "https://realradar.nyc3.digitaloceanspaces.com/rain.gif"
                : "https://realradar.nyc3.digitaloceanspaces.com/last_radar_image.png";

            currentOverlay = L.imageOverlay(
                imageUrl + (isAnimated ? "" : "?t=" + new Date().getTime()),
                imageBounds,
                {
                    opacity: 0.5,
                    interactive: false,
                },
            ).addTo(map);
        }

        function toggleOverlay() {
            isAnimated = !isAnimated;
            addRadarOverlay();
            if (switchButton) {
                switchButton.textContent = isAnimated
                    ? "Animación"
                    : "Estático";
            }
        }

        addRadarOverlay();

        if (switchButton) {
            switchButton.addEventListener("click", () => {
                // Toggle the 'active' class on button click
                switchButton.classList.toggle("active");

                // Update the button text based on its state
                switchButton.textContent = switchButton.classList.contains(
                    "active",
                )
                    ? "Activo"
                    : "Estático";

                // Call the toggleOverlay function only if the button is active
                toggleOverlay(); // Call your overlay function here
            });
        }
        const radarCoords = [6.191560470778841, -75.52618723347129];

        setInterval(addRadarOverlay, 2 * 60 * 1000);

        const SwitchControl = L.Control.extend({
            onAdd: function (map: any) {
                const container = L.DomUtil.create(
                    "div",
                    "leaflet-bar leaflet-control switch-control",
                );
                const button = L.DomUtil.create(
                    "a",
                    "switch-button",
                    container,
                );
                button.href = "#";
                button.title = "Switch Overlay";
                button.innerHTML = "Estático";
                L.DomEvent.on(button, "click", L.DomEvent.stop).on(
                    button,
                    "click",
                    function () {
                        toggleOverlay();
                        button.innerHTML =
                            button.innerHTML === "Estático"
                                ? "Animación"
                                : "Estático";
                    },
                );
                return container;
            },
        });

        window.addEventListener("resize", () => {
            map.invalidateSize();
        });

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { latitude, longitude } = position.coords;
                    const userCoords: L.LatLngTuple = [latitude, longitude];

                    map.setView(userCoords, 11);
                    // Fetch temperature for user's location
                    fetchTemperature(latitude, longitude);

                    const userIcon = L.icon({
                        iconUrl: "/assets/pin.svg",
                        iconSize: [38, 38],
                        iconAnchor: [22, 38],
                        popupAnchor: [-3, -38],
                    });
                    L.marker(userCoords, { icon: userIcon })
                        .addTo(map)
                        .openPopup();
                    map.setView(userCoords, 9.5);
                },

                (error) => {
                    console.error("Error getting location:", error);
                    alert("Could not retrieve your location.");
                },
            );
        } else {
            alert("Geolocation is not supported by your browser.");
        }
    });
</script>
