---
// LeafletMap.astro
// This component renders an interactive Leaflet map displaying a base layer,
// a weather radar overlay (switchable between static and JS-animated),
// the user's current location (if permitted), and the temperature
// at the user's location or the map center.

import Icon from "./Icon.astro";
---

<div id="map" class="map-container"></div>

<button id="switchButton" class="switch-button">Est&aacute;tico</button>

<div id="temperatureDisplay" class="temperature-display">
    <Icon icon="weather" size="2.0em" />
    <span class="temp-value">--°C</span>
    <span class="location-name">Loading...</span>
    <button
        id="shareButton"
        class="share-button"
        type="button"
        title="Compartir esta página"
    >
        <Icon icon="share" size="2.0em" />
        <span class="share-value">Compartir</span>
    </button>
</div>

<script type="module">
    const shareButton = document.getElementById("shareButton");
    if (shareButton) {
        shareButton.addEventListener("click", async () => {
            if (navigator.share) {
                try {
                    await navigator.share({
                        title: document.title,
                        text: "Te comparto este radar para ver la lluvias en tiempo real en Antioquia",
                        url: window.location.href,
                    });
                } catch (err) {
                    // User cancelled or error occurred
                }
            } else {
                // Fallback: copy link to clipboard and alert user
                try {
                    await navigator.clipboard.writeText(window.location.href);
                    alert("Enlace copiado al portapapeles");
                } catch (e) {
                    alert(
                        "No se pudo compartir. Copia el enlace manualmente: " +
                            window.location.href,
                    );
                }
            }
        });
    }
</script>
<style>
    /* Basic reset for full-screen map */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    /* Map container styling */
    .map-container {
        height: 100vh; /* Full viewport height */
        width: 100vw; /* Full viewport width */
    }

    /* Ensure map overlays correctly */
    #map {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1; /* Base layer z-index */
    }

    /* Improve image rendering for overlay */
    .leaflet-image-layer {
        image-rendering: auto; /* Or pixelated if preferred for radar */
        /* Add transition for smoother image changes, adjust timing as needed */
        transition: opacity 0.2s ease-in-out;
    }

    /* Temperature display styling */
    .temperature-display {
        position: fixed;
        bottom: 100px;
        right: 20px;
        background-color: var(--theme-bg-alpha, rgba(255, 255, 255, 0.9));
        color: var(--theme-text, #000);
        padding: 10px 15px;
        border-radius: 8px;
        z-index: 1000;
        box-shadow: var(--shadow-md);
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        transition: all 0.3s ease;
    }

    /* Dark theme overrides for temperature display */
    .theme-dark .temperature-display {
        --theme-bg-alpha: rgba(30, 30, 30, 0.9);
        --theme-text: white;
        --location-text-color: var(--gray-400);
    }

    /* Temperature value text style */
    .temp-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    /* Location name text style */
    .location-name {
        font-size: 0.875rem;
        color: var(
            --location-text-color,
            var(--gray-500)
        ); /* Default light theme color */
    }

    .share-button {
        z-index: 1000;
        box-shadow: var(--shadow-md);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 10px;
        font-family: Arial, sans-serif;
        font-size: var(--text-sm);
    }

    /* Styling for the overlay switch button */
    .switch-button {
        width: 150px;
        height: 40px;
        z-index: 1000;
        border-radius: 20px;
        background-color: var(--gray-999);
        border: none;
        cursor: pointer;
        position: fixed;
        bottom: 40px;
        right: 20px;
        outline: none;
        transition: background-color 0.3s, color 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 10px;
        font-family: Arial, sans-serif;
        font-size: var(--text-sm);
        font-weight: bolder;
        color: var(--gray-50);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        box-shadow: var(--shadow-md);
    }

    /* Active state style for the switch button */
    .switch-button.active {
        background-color: var(--accent-regular);
        color: white;
    }

    /* Media query for larger screens */
    @media (min-width: 768px) {
        .temperature-display {
            right: 90px;
        }
        .switch-button {
            right: 90px;
        }
    }
</style>

<script>
    import L from "leaflet";
    import "leaflet/dist/leaflet.css";

    document.addEventListener("DOMContentLoaded", () => {
        // --- Configuration Constants ---
        const MEDELLIN_COORDS: L.LatLngTuple = [6.2442, -75.5812];
        const INITIAL_ZOOM = 10;
        const USER_LOCATION_ZOOM = 11;
        const MIN_ZOOM = 5;
        const MAX_ZOOM = 18;
        const RADAR_REFRESH_INTERVAL_MS = 5 * 60 * 1000; // 5 minutes (adjust as needed)
        const WEATHER_API_KEY = import.meta.env.PUBLIC_WEATHER_API_KEY;
        const STATIC_RADAR_URL =
            "https://siata.gov.co/kml/00_Radar/Ultimo_Barrido/AreaMetRadar_10_120_DBZH.png";
        // SIATA API and Image Base Configuration
        const SIATA_API_ENDPOINT =
            "https://siata.gov.co/newpage/widget-animacion_radar-getRadarImages1.php";
        const SIATA_IMAGE_BASE_URL = "https://siata.gov.co/";
        const RADAR_ELEVATION = 10; // Radar elevation angle
        const RADAR_INTERVAL = 1; // Interval parameter for API
        const ANIMATION_FRAME_INTERVAL_MS = 500; // Time between animation frames (0.5 seconds)

        const RADAR_IMAGE_BOUNDS = L.latLngBounds(
            L.latLng(5.1004, -76.5946), // Southwest corner
            L.latLng(7.3004, -74.2946), // Northeast corner
        );
        const USER_ICON_URL = "/assets/pin.svg";
        const ERROR_OVERLAY_URL = "/assets/radar-error.png"; // Optional error image

        // --- DOM Element References ---
        const mapElement = document.getElementById("map");
        const switchButtonElement = document.getElementById("switchButton");
        const temperatureDisplayElement =
            document.getElementById("temperatureDisplay");
        const tempValueElement =
            temperatureDisplayElement?.querySelector<HTMLElement>(
                ".temp-value",
            );
        const locationNameElement =
            temperatureDisplayElement?.querySelector<HTMLElement>(
                ".location-name",
            );

        // --- State Variables ---
        let map: L.Map | null = null;
        let currentBaseLayer: L.TileLayer | null = null;
        let currentRadarOverlay: L.ImageOverlay | null = null;
        let isRadarAnimated = false;
        let radarUpdateInterval: number | null = null;
        // Animation specific state
        let radarFrameUrls: string[] = []; // Holds the URLs for animation frames
        let currentFrameIndex: number = 0;
        let animationIntervalId: number | null = null; // ID for the animation setInterval
        let isFetchingFrames = false; // Flag to prevent multiple fetches

        // --- Type Definitions ---
        interface WeatherApiResponse {
            location: { name: string };
            current: { temp_c: number };
        }
        // Type for the SIATA API response
        interface SiataRadarImagesResponse {
            nameImages: string[]; // e.g., "../data/radar/10/20250502/202505021959.png"
            nameDates: number[]; // Timestamps (likely milliseconds)
        }

        // --- Initialization Check ---
        if (!mapElement || (mapElement as any)._leaflet_id) {
            console.log("Map container not found or already initialized.");
            return;
        }
        if (
            !temperatureDisplayElement ||
            !tempValueElement ||
            !locationNameElement
        ) {
            console.error("Temperature display elements not found.");
            return;
        }

        // --- Core Functions ---

        function initializeMap(): L.Map {
            if (!mapElement) {
                throw new Error("Map container element not found");
            }
            const mapInstance = L.map(mapElement, {
                zoomControl: false,
                center: MEDELLIN_COORDS,
                zoom: INITIAL_ZOOM,
                minZoom: MIN_ZOOM,
                maxZoom: MAX_ZOOM,
            });
            return mapInstance;
        }

        function getBaseLayers(): Record<string, L.TileLayer> {
            /* ... (same as before) ... */
            const stadiaAttribution =
                '&copy; <a href="https://stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors';
            return {
                "Alidade Smooth": L.tileLayer(
                    "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png",
                    { attribution: stadiaAttribution, maxZoom: MAX_ZOOM },
                ),
                "Dark Matter": L.tileLayer(
                    "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png",
                    { attribution: stadiaAttribution, maxZoom: MAX_ZOOM },
                ),
            };
        }

        function switchBaseMapLayer(
            theme: "light" | "dark",
            mapInstance: L.Map,
            baseLayers: Record<string, L.TileLayer>,
        ): void {
            /* ... (same as before) ... */
            if (currentBaseLayer) {
                mapInstance.removeLayer(currentBaseLayer);
            }
            const newLayer =
                theme === "dark"
                    ? baseLayers["Dark Matter"]
                    : baseLayers["Alidade Smooth"];
            if (newLayer) {
                currentBaseLayer = newLayer;
                currentBaseLayer.addTo(mapInstance);
            } else {
                console.error(
                    "Could not find appropriate base layer for theme:",
                    theme,
                );
            }
        }

        function setupThemeSwitcher(
            mapInstance: L.Map,
            baseLayers: Record<string, L.TileLayer>,
        ): void {
            /* ... (same as before) ... */
            const observer = new MutationObserver(() => {
                const currentTheme =
                    document.documentElement.classList.contains("theme-dark")
                        ? "dark"
                        : "light";
                switchBaseMapLayer(currentTheme, mapInstance, baseLayers);
            });
            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ["class"],
            });
            const initialTheme = document.documentElement.classList.contains(
                "theme-dark",
            )
                ? "dark"
                : "light";
            switchBaseMapLayer(initialTheme, mapInstance, baseLayers);
        }

        function updateTemperatureUI(
            temp: string | number | null,
            location: string | null,
            isLoading: boolean = false,
            isError: boolean = false,
        ): void {
            /* ... (same as before) ... */
            if (!tempValueElement || !locationNameElement) return;
            if (isLoading) {
                tempValueElement.textContent = "--°C";
                locationNameElement.textContent = "Loading...";
            } else if (isError) {
                tempValueElement.textContent = "N/A";
                locationNameElement.textContent = "Error loading data";
            } else if (temp !== null && location !== null) {
                tempValueElement.textContent = `${Math.round(Number(temp))}°C`;
                locationNameElement.textContent = location;
            } else {
                tempValueElement.textContent = "N/A";
                locationNameElement.textContent = "Unavailable";
            }
        }

        async function fetchTemperature(
            lat: number,
            lon: number,
        ): Promise<void> {
            /* ... (same as before) ... */
            if (!WEATHER_API_KEY) {
                console.error("Weather API key is missing.");
                updateTemperatureUI(null, null, false, true);
                return;
            }
            updateTemperatureUI(null, null, true);
            try {
                const response = await fetch(
                    `https://api.weatherapi.com/v1/current.json?key=${WEATHER_API_KEY}&q=${lat},${lon}&aqi=no`,
                );
                if (!response.ok) {
                    throw new Error(
                        `Weather data fetch failed: ${response.status} ${response.statusText}`,
                    );
                }
                const data: WeatherApiResponse = await response.json();
                updateTemperatureUI(data.current.temp_c, data.location.name);
            } catch (error) {
                console.error("Error fetching temperature:", error);
                updateTemperatureUI(null, null, false, true);
            }
        }

        /**
         * Fetches the list of radar image URLs from the SIATA API.
         * @returns {Promise<string[]>} A promise that resolves with an array of full image URLs, or rejects on error.
         */
        async function fetchRadarImageUrls(): Promise<string[]> {
            // Get current timestamp in seconds for the API
            const currentTimestampSeconds = Math.floor(Date.now() / 1000);
            const queryParams = new URLSearchParams({
                elevation: RADAR_ELEVATION.toString(),
                date: currentTimestampSeconds.toString(),
                interval: RADAR_INTERVAL.toString(),
                nowcasting: "undefined",
            });

            console.log(
                "Fetching radar image list with params:",
                queryParams.toString(),
            );

            try {
                const response = await fetch(
                    `${SIATA_API_ENDPOINT}?${queryParams.toString()}`,
                    {
                        headers: {
                            Referer: "https://siata.gov.co/newpage/",
                            Origin: "https://siata.gov.co",
                        },
                    },
                );

                if (!response.ok) {
                    throw new Error(
                        `Failed to fetch radar images list: ${response.status} ${response.statusText}`,
                    );
                } else {
                    console.info(`Response: ${response.status}`);
                }

                const data: SiataRadarImagesResponse = await response.json();
                console.log(data);
                if (
                    !data ||
                    !Array.isArray(data.nameImages) ||
                    data.nameImages.length === 0
                ) {
                    throw new Error(
                        "Invalid or empty image list received from API.",
                    );
                }

                // Process paths: remove "../" and prepend base URL
                const fullUrls = data.nameImages.map((relativePath) => {
                    // Remove leading "../" if present
                    const cleanPath = relativePath.startsWith("../")
                        ? relativePath.substring(3)
                        : relativePath;
                    return `${SIATA_IMAGE_BASE_URL}${cleanPath}`;
                });

                console.log(`Workspaceed ${fullUrls.length} radar image URLs.`);
                return fullUrls;
            } catch (error) {
                console.error("Error fetching radar image URLs:", error);
                // Re-throw the error to be caught by the caller
                throw error;
            }
        }

        /**
         * Creates the radar ImageOverlay layer if it doesn't exist.
         * Sets the initial URL (usually the static one or the first frame).
         * @param {L.Map} mapInstance - The Leaflet map instance.
         * @param {string} initialImageUrl - The URL for the first image to display.
         */
        function ensureRadarOverlay(
            mapInstance: L.Map,
            initialImageUrl: string,
        ): void {
            if (!currentRadarOverlay) {
                console.log("Creating radar overlay layer.");
                currentRadarOverlay = L.imageOverlay(
                    initialImageUrl,
                    RADAR_IMAGE_BOUNDS,
                    {
                        opacity: 0.6,
                        interactive: false,
                        errorOverlayUrl: ERROR_OVERLAY_URL, // Placeholder if image fails
                    },
                ).addTo(mapInstance);
            } else {
                // If overlay exists, just update its URL
                console.log("Updating existing radar overlay URL.");
                currentRadarOverlay.setUrl(initialImageUrl);
            }
            // Ensure opacity is set correctly (might reset on setUrl)
            currentRadarOverlay.setOpacity(0.6);
        }

        /** Clears the animation interval. */
        function stopRadarAnimation(): void {
            if (animationIntervalId !== null) {
                console.log("Stopping radar animation.");
                clearInterval(animationIntervalId);
                animationIntervalId = null;
            }
            currentFrameIndex = 0; // Reset frame index
        }

        /**
         * Fetches radar frames and starts the animation loop.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        async function startRadarAnimation(mapInstance: L.Map): Promise<void> {
            if (isFetchingFrames) {
                console.log("Already fetching frames, skipping.");
                return;
            }
            stopRadarAnimation(); // Stop any previous animation
            isFetchingFrames = true;
            console.log("Starting radar animation: fetching frames...");

            try {
                radarFrameUrls = await fetchRadarImageUrls();

                if (radarFrameUrls.length === 0) {
                    console.warn(
                        "No animation frames found. Staying in static mode.",
                    );
                    // Optionally switch back to static mode visually
                    isRadarAnimated = false;
                    if (switchButtonElement) {
                        switchButtonElement.classList.remove("active");
                        switchButtonElement.textContent = "Estático";
                    }
                    ensureRadarOverlay(
                        mapInstance,
                        `${STATIC_RADAR_URL}?t=${new Date().getTime()}`,
                    );
                    isFetchingFrames = false;
                    return; // Exit if no frames
                }

                // Ensure overlay exists and set the first frame
                ensureRadarOverlay(mapInstance, radarFrameUrls[0]);
                currentFrameIndex = 0;

                // Start the animation loop
                animationIntervalId = window.setInterval(() => {
                    if (!currentRadarOverlay || radarFrameUrls.length === 0) {
                        stopRadarAnimation();
                        return;
                    }
                    // Increment frame index, looping back to 0
                    currentFrameIndex =
                        (currentFrameIndex + 1) % radarFrameUrls.length;
                    // Update the overlay URL to the next frame
                    currentRadarOverlay.setUrl(
                        radarFrameUrls[currentFrameIndex],
                    );
                }, ANIMATION_FRAME_INTERVAL_MS);

                console.log("Radar animation started.");
            } catch (error) {
                console.error("Failed to start radar animation:", error);
                // Attempt to show static image as fallback
                ensureRadarOverlay(
                    mapInstance,
                    `${STATIC_RADAR_URL}?t=${new Date().getTime()}`,
                );
                // Optionally revert button state
                isRadarAnimated = false;
                if (switchButtonElement) {
                    switchButtonElement.classList.remove("active");
                    switchButtonElement.textContent = "Estático";
                }
            } finally {
                isFetchingFrames = false; // Allow fetching again
            }
        }

        /**
         * Toggles the radar overlay between static and animated modes.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function toggleRadarOverlay(mapInstance: L.Map): void {
            isRadarAnimated = !isRadarAnimated; // Toggle the state

            // Update the switch button appearance and text
            if (switchButtonElement) {
                switchButtonElement.classList.toggle("active", isRadarAnimated);
                switchButtonElement.textContent = isRadarAnimated
                    ? "Animación"
                    : "Estático";
            }

            if (isRadarAnimated) {
                // Switched TO animated
                startRadarAnimation(mapInstance);
            } else {
                // Switched TO static
                stopRadarAnimation();
                // Update overlay to show the latest static image
                ensureRadarOverlay(
                    mapInstance,
                    `${STATIC_RADAR_URL}?t=${new Date().getTime()}`,
                );
            }
        }

        function setupEventListeners(mapInstance: L.Map): void {
            /* ... (same as before, calls toggleRadarOverlay) ... */
            if (switchButtonElement) {
                switchButtonElement.addEventListener("click", () => {
                    toggleRadarOverlay(mapInstance); // The core logic is now here
                });
            } else {
                console.warn(
                    "Switch button element not found. Toggle functionality disabled.",
                );
            }
            window.addEventListener("resize", () => {
                mapInstance.invalidateSize();
            });
        }

        function handleGeolocation(mapInstance: L.Map): void {
            /* ... (same as before) ... */
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const { latitude, longitude } = position.coords;
                        const userCoords: L.LatLngTuple = [latitude, longitude];
                        mapInstance.setView(userCoords, USER_LOCATION_ZOOM);
                        const userIcon = L.icon({
                            iconUrl: USER_ICON_URL,
                            iconSize: [38, 38],
                            iconAnchor: [19, 38],
                            popupAnchor: [0, -38],
                        });
                        L.marker(userCoords, { icon: userIcon }).addTo(
                            mapInstance,
                        );
                        fetchTemperature(latitude, longitude);
                    },
                    (error) => {
                        console.error("Error getting location:", error.message);
                        console.warn("Using default location for temperature.");
                        fetchTemperature(
                            MEDELLIN_COORDS[0],
                            MEDELLIN_COORDS[1],
                        );
                    },
                    {
                        enableHighAccuracy: false,
                        timeout: 10000,
                        maximumAge: 60000,
                    },
                );
            } else {
                console.warn("Geolocation is not supported.");
                fetchTemperature(MEDELLIN_COORDS[0], MEDELLIN_COORDS[1]);
            }
        }

        /**
         * Starts the periodic refresh of the radar data.
         * If animated, fetches new frames. If static, refreshes the static image URL.
         * @param {L.Map} mapInstance - The Leaflet map instance.
         */
        function startRadarRefresh(mapInstance: L.Map): void {
            if (radarUpdateInterval !== null) {
                clearInterval(radarUpdateInterval);
            }
            radarUpdateInterval = window.setInterval(() => {
                console.log("Periodic radar refresh triggered.");
                if (isRadarAnimated) {
                    // If animating, fetch new frames and restart animation
                    console.log("Refreshing animation frames...");
                    startRadarAnimation(mapInstance); // This will stop old animation and fetch new data
                } else if (currentRadarOverlay) {
                    // If static, just update the static image URL (cache buster)
                    console.log("Refreshing static radar image...");
                    const staticUrl = `${STATIC_RADAR_URL}?t=${new Date().getTime()}`;
                    currentRadarOverlay.setUrl(staticUrl);
                } else {
                    // If overlay doesn't exist yet, create it with static image
                    ensureRadarOverlay(
                        mapInstance,
                        `${STATIC_RADAR_URL}?t=${new Date().getTime()}`,
                    );
                }
            }, RADAR_REFRESH_INTERVAL_MS);
        }

        // --- Main Execution ---
        try {
            map = initializeMap();
            const baseLayers = getBaseLayers();
            setupThemeSwitcher(map, baseLayers);

            // Ensure the overlay layer exists initially with the static image
            ensureRadarOverlay(
                map,
                `${STATIC_RADAR_URL}?t=${new Date().getTime()}`,
            );

            setupEventListeners(map);
            handleGeolocation(map);
            startRadarRefresh(map); // Start periodic refresh
        } catch (error) {
            console.error("Failed to initialize map component:", error);
            if (mapElement) {
                mapElement.innerHTML =
                    '<p style="padding: 20px; text-align: center; color: red;">Error loading map.</p>';
            }
            updateTemperatureUI(null, null, false, true);
        }
    }); // End of DOMContentLoaded listener
</script>
